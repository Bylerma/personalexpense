// Fallback Chart.js implementation
class Chart {
    constructor(ctx, config) {
        this.ctx = ctx;
        this.config = config;
        this.render();
    }
    
    render() {
        // Simple fallback - create a text representation
        const canvas = this.ctx.canvas;
        const ctx = this.ctx;
        const data = this.config.data;
        
        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Simple bar chart fallback
        if (data.labels && data.datasets && data.datasets[0]) {
            ctx.fillStyle = '#2563eb';
            ctx.font = '14px Arial';
            
            const barWidth = canvas.width / (data.labels.length || 1) - 20;
            const maxValue = Math.max(...(data.datasets[0].data || [1]));
            
            data.labels.forEach((label, index) => {
                const value = data.datasets[0].data[index] || 0;
                const barHeight = (value / maxValue) * (canvas.height - 50);
                const x = index * (barWidth + 20) + 10;
                const y = canvas.height - barHeight - 30;
                
                // Draw bar
                ctx.fillRect(x, y, barWidth, barHeight);
                
                // Draw label
                ctx.fillStyle = '#000';
                ctx.fillText(label, x, canvas.height - 10);
                ctx.fillText(value.toString(), x, y - 5);
                ctx.fillStyle = '#2563eb';
            });
        }
    }
}
